{"version":3,"file":"NsisUpdater.js","sourceRoot":"","sources":["../src/NsisUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AllPublishOptions,\n  CancellationToken,\n  DownloadOptions,\n  newError,\n  PackageFileInfo,\n  UpdateInfo\n} from 'builder-util-runtime';\nimport {spawn} from 'child_process';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport 'source-map-support/register';\nimport {BaseUpdater} from './BaseUpdater';\nimport {FileWithEmbeddedBlockMapDifferentialDownloader} from './differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader';\nimport {GenericDifferentialDownloader} from './differentialDownloader/GenericDifferentialDownloader';\nimport {newUrlFromBase, ResolvedUpdateFileInfo} from './main';\nimport {findFile, Provider} from './Provider';\nimport {unlink} from 'fs-extra-p';\nimport {verifySignature} from './windowsExecutableCodeSignatureVerifier';\n\nexport class NsisUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app);\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(\n    updateInfo: UpdateInfo,\n    cancellationToken: CancellationToken\n  ): Promise<Array<string>> {\n    const provider = await this.provider;\n    const fileInfo = findFile(provider.resolveFiles(updateInfo), 'exe')!!;\n    const requestHeaders = await this.computeRequestHeaders();\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: requestHeaders,\n      cancellationToken,\n      sha512: fileInfo.info.sha512\n    };\n\n    return await this.executeDownload({\n      fileExtension: 'exe',\n      downloadOptions,\n      fileInfo,\n      updateInfo,\n      task: async (destinationFile, packageFile, removeTempDirIfAny) => {\n        if (\n          await this.differentialDownloadInstaller(\n            fileInfo,\n            destinationFile,\n            requestHeaders,\n            provider\n          )\n        ) {\n          await this.httpExecutor.download(\n            fileInfo.url.href,\n            destinationFile,\n            downloadOptions\n          );\n        }\n\n        const signatureVerificationStatus = await this.verifySignature(\n          destinationFile\n        );\n        if (signatureVerificationStatus != null) {\n          await removeTempDirIfAny();\n          // noinspection ThrowInsideFinallyBlockJS\n          throw newError(\n            `New version ${\n              updateInfo!.version\n            } is not signed by the application owner: ${signatureVerificationStatus}`,\n            'ERR_UPDATER_INVALID_SIGNATURE'\n          );\n        }\n\n        const packageInfo = fileInfo.packageInfo;\n        if (packageInfo != null && packageFile != null) {\n          if (\n            await this.differentialDownloadWebPackage(\n              packageInfo,\n              packageFile,\n              provider\n            )\n          ) {\n            try {\n              await this.httpExecutor.download(packageInfo.path, packageFile, {\n                skipDirCreation: true,\n                headers: requestHeaders,\n                cancellationToken,\n                sha512: packageInfo.sha512\n              });\n            } catch (e) {\n              try {\n                await unlink(packageFile);\n              } catch (ignored) {\n                // ignore\n              }\n\n              throw e;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  // $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n  // | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n  // | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\n  private async verifySignature(\n    tempUpdateFile: string\n  ): Promise<string | null> {\n    let publisherName: Array<string> | string | null;\n    try {\n      publisherName = (await this.configOnDisk.value).publisherName;\n      if (publisherName == null) {\n        return null;\n      }\n    } catch (e) {\n      if (e.code === 'ENOENT') {\n        // no app-update.yml\n        return null;\n      }\n      throw e;\n    }\n    return await verifySignature(\n      Array.isArray(publisherName) ? publisherName : [publisherName],\n      tempUpdateFile,\n      this._logger\n    );\n  }\n\n  protected doInstall(\n    installerPath: string,\n    isSilent: boolean,\n    isForceRunAfter: boolean\n  ): boolean {\n    const args = ['--updated'];\n    if (isSilent) {\n      args.push('/S');\n    }\n\n    if (isForceRunAfter) {\n      args.push('--force-run');\n    }\n\n    const packagePath = this.downloadedUpdateHelper.packageFile;\n    if (packagePath != null) {\n      // only = form is supported\n      args.push(`--package-file=${packagePath}`);\n    }\n\n    const spawnOptions = {\n      detached: true,\n      stdio: 'ignore'\n    };\n\n    let subprocess = spawn(installerPath, args, spawnOptions);\n\n    subprocess.on('error', e => {\n      if ((e as any).code === 'UNKNOWN' || (e as any).code === 'EACCES') {\n        // Node 8 sends errors: https://nodejs.org/dist/latest-v8.x/docs/api/errors.html#errors_common_system_errors\n        this._logger.info(\n          'Access denied or UNKNOWN error code on spawn, will be executed again using elevate'\n        );\n        spawn(\n          path.join(process.resourcesPath!, 'elevate.exe'),\n          [installerPath].concat(args),\n          spawnOptions\n        ).unref();\n      } else {\n        this.dispatchError(e);\n      }\n    });\n\n    subprocess.unref();\n\n    return true;\n  }\n\n  private async differentialDownloadInstaller(\n    fileInfo: ResolvedUpdateFileInfo,\n    installerPath: string,\n    requestHeaders: OutgoingHttpHeaders,\n    provider: Provider<any>\n  ) {\n    if (process.env.__NSIS_DIFFERENTIAL_UPDATE__ == null) {\n      return true;\n    }\n\n    try {\n      const blockMapData = JSON.parse(\n        (await provider.httpRequest(\n          newUrlFromBase(`${fileInfo.url.pathname}.blockMap.json`, fileInfo.url)\n        ))!!\n      );\n      await new GenericDifferentialDownloader(\n        fileInfo.info,\n        this.httpExecutor,\n        {\n          newUrl: fileInfo.url.href,\n          oldFile: path.join(this.app.getPath('userData'), 'installer.exe'),\n          logger: this._logger,\n          newFile: installerPath,\n          useMultipleRangeRequest: provider.useMultipleRangeRequest,\n          requestHeaders\n        }\n      ).download(blockMapData);\n    } catch (e) {\n      this._logger.error(\n        `Cannot download differentially, fallback to full download: ${e.stack ||\n          e}`\n      );\n      // during test (developer machine mac) we must throw error\n      return process.platform === 'win32';\n    }\n\n    return false;\n  }\n\n  private async differentialDownloadWebPackage(\n    packageInfo: PackageFileInfo,\n    packagePath: string,\n    provider: Provider<any>\n  ): Promise<boolean> {\n    if (packageInfo.blockMapSize == null) {\n      return true;\n    }\n\n    try {\n      await new FileWithEmbeddedBlockMapDifferentialDownloader(\n        packageInfo,\n        this.httpExecutor,\n        {\n          newUrl: packageInfo.path,\n          oldFile: path.join(process.resourcesPath!, '..', 'package.7z'),\n          logger: this._logger,\n          newFile: packagePath,\n          requestHeaders: this.requestHeaders,\n          useMultipleRangeRequest: provider.useMultipleRangeRequest\n        }\n      ).download();\n    } catch (e) {\n      this._logger.error(\n        `Cannot download differentially, fallback to full download: ${e.stack ||\n          e}`\n      );\n      // during test (developer machine mac or linux) we must throw error\n      return process.platform === 'win32';\n    }\n    return false;\n  }\n}\n"]}
